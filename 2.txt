package process_control;
import java.util.Scanner;
public class Process_control2 {
    public static void main(String[] args) {
        Process_control2 b=new Process_control2();
        Scanner sc=new Scanner(System.in);
        int choice;
        System.out.println("*************************************************************");
        System.out.println("                       银行家算法的实现                          ");
        System.out.println("*************************************************************");
        b.init();
        b.showdata();
        System.out.println("*************************************************************");
        System.out.println("                     1:银行家算法 ");
        System.out.println("                     2:安全性检测 ");
        System.out.println("                     3:退出      ");
        System.out.println("*************************************************************");
        System.out.print("请选择：");
        choice = sc.nextInt();
        switch (choice) {
            case 1:
                b.systeam();
                break;
            case 2:
                b.request();
                break;
            case 3:
                break;
            default:
                System.out.println("请正确选择！");
                break;
        }
    }
        String NAME[]=new String[3];//资源的名称
        int Max[][]= new int[5][3];//最大需求矩阵
        int Allocation[][]=new int[5][3];//系统已分配矩阵
        int Need[][]=new int[5][3];//还需要资源矩阵
        int Available[]=new int[3];//可用资源矩阵
        int Request[][]=new int[5][3];//请求资源向量
        int Work[]=new int[3];//存放系统可提供资源量
        int Finish[]=new int[5]; //标记系统是否有足够的资源分配给各个进程
        int Security[]=new int[5];//存放安全序列
        int safe[]=new int[3];
        int M=5;//进程的最大数
        int N=3;//资源的最大数
        Scanner sc=new Scanner(System.in);
        //初始化各类数据
        public void init()
        {
            int i,j,m,n;
            int number;
            boolean flag;
            String name;//输入资源名称
            int temp[]=new int[3];//统计已分配资源
            //输入系统资源数目及各资源初试个数
            N=3;
            NAME[0]="1";
            NAME[1]="2";
            NAME[2]="3";
            for(i=0;i<3;i++)
            {
                System.out.println("资源"+NAME[i]+"初始化个数为:");
                number=sc.nextInt();
                Available[i]=number;
            }
            //输入进程数及各进程的最大需求矩阵
            M=5;
            System.out.println("请输入各进程的最大需求矩阵的值[Max]:");
            do {
                flag=false;
                for(i=0;i<M;i++)
                {
                    for(j=0;j<N;j++)
                    {
                        Max[i][j]=sc.nextInt();
                        if(Max[i][j]>Available[j])
                        {
                            flag=true;
                        }
                    }
                }
                if(flag)
                {
                    System.out.println("资源最大需求量大于系统中资源最大量，请重新输入!");
                }
            }while(flag);

            //输入各进程已经分配的资源量，并求得还需要的资源量
            do {
                flag=false;
                System.out.println("请输入各进程已经分配的资源量[Allocation]:");
                for(i=0;i<M;i++)
                {
                    for(j=0;j<N;j++)
                    {
                        Allocation[i][j]=sc.nextInt();
                        if(Allocation[i][j]>Max[i][j])
                        {
                            flag=true;
                        }
                        Need[i][j]=Max[i][j]-Allocation[i][j];
                        temp[j]+=Allocation[i][j];//统计已经分配给进程的资源数目
                    }
                }
                if(flag)
                {
                    System.out.println("分配的资源大于最大量，请重新输入!");
                }
            }while(flag);

            //求得系统中可利用的资源量
            for(j=0;j<N;j++)
            {
                safe[j]=Available[j]=Available[j]-temp[j];
            }

        }
        //显示资源分配矩阵
        public void showdata(){
            int i,j;
            System.out.println("*************************************************************");
            System.out.println("系统目前可用的资源[Available]:");
            for(i=0;i<N;i++)
            {
                System.out.print(NAME[i]+"  ");
            }
            System.out.println();
            for(j=0;j<N;j++)
            {
                System.out.print(Available[j]+"  ");
            }
            System.out.println();
            System.out.println("系统当前的资源分配情况如下：");
            System.out.println("进程名    Max   	Allocation      Need   	 Available");
            //输出与进程名同行的资源名，Max、Allocation、Need下分别对应
            //输出每个进程的Max、Allocation、Need
            for(i=0;i<M;i++)
            {
                System.out.print("P"+i+"    ");
                for(j=0;j<N;j++)
                {
                    System.out.print(Max[i][j]+"  ");
                }
                System.out.print("     ");
                for(j=0;j<N;j++)
                {
                    System.out.print(Allocation[i][j]+"  ");
                }
                System.out.print("     ");
                for(j=0;j<N;j++)
                {
                    System.out.print(Need[i][j]+"  ");
                }
                if(i==0){
                    System.out.print("     ");
                    for(j=0;j<N;j++) {
                        System.out.print(Available[j] + "  ");
                    }
                }
                System.out.println();
            }
        }
        public void request() {
            System.out.println("请输入进程的名称和资源要求");
            int process = sc.nextInt();
            for (int i = 0; i < 3; i++) {
                Request[process][i] = sc.nextInt();
            }
            if (Request[process][0] > Need[process][0] || Request[process][1] > Need[process][1] || Request[process][2] > Need[process][2]) {
                System.out.println("进程的资源要求大于需求，请重新输入");
                request();
            }
            else {
                if (Request[process][0] > Available[0] || Request[process][1] > Available[1] || Request[process][2] > Available[2]){
                    System.out.println("进程p"+process+"不能立刻得到资源");
                }
                else{
                    System.out.println("进程p"+process+"能够立刻得到资源");
                }
            }
            request();
        }
        public void systeam(){
            int i,j,k=0,m,apply;
            for(j=0;j<3;j++)//初始化work
            {
                Work[j]=Available[j];
            }
            for(i=0;i<M;i++)//初始化Finish
            {
                Finish[i]=0;
            }
            for(i=0;i<M;i++)
            {
                apply=0;
                for(j=0;j<N;j++)
                {
                    if(Finish[i]==0&&Need[i][j]<=Work[j])
                    {
                        apply++;//直到每类资源尚需数都小于系统可利用资源数才可分配
                        if(apply==N)
                        {
                            for(m=0;m<N;m++)
                            {
                                Work[m]=Work[m]+Allocation[i][m];//更改当前可分配资源
                            }
                            Finish[i]=1;
                            Security[k++]=i;
                            i=-1; //保证每次查询均从第一个进程开始
                        }
                    }
                }
            }
            for(i=0;i<M;i++)
            {
                if(Finish[i]==0)
                {
                    System.out.println("系统不安全！");
                }
            }
            System.out.println("系统安全！");
            System.out.println("存在一个安全序列：");
            for(i=0;i<M;i++)
            {
                System.out.print("P"+Security[i]);
                if(i<M-1)
                {
                    System.out.print("->");
                }
            }
            System.out.println();
            output();
        }
        public void output(){
            for(int i=0;i<3;i++){
                Work[i]=safe[i];
            }
            System.out.println("进程名    Work      Need   	 Allocation   Work +Allocation   Finish");
            for(int i=0;i<5;i++) {
                System.out.print("P" + Security[i] + "    ");
                for(int j=0;j<N;j++)
                {
                    System.out.print(Work[j]+"  ");
                }
                System.out.print("     ");
                for(int j=0;j<N;j++)
                {
                    System.out.print(Need[Security[i]][j]+"  ");
                }
                System.out.print("     ");
                for(int j=0;j<N;j++)
                {
                    System.out.print(Allocation[Security[i]][j]+"  ");
                }
                System.out.print("     ");
                for(int j=0;j<3;j++) {
                    Work[j]=Work[j] + Allocation[Security[i]][j];
                    System.out.print(Work[j]+"  ");
                }
                System.out.print("     ");
                System.out.print("T");
                System.out.println(" ");
            }
        }
        //主函数
    }

